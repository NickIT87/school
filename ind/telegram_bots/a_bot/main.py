from telebot import types

from settings import MypyBot, users, q_base, FILE_UPLOAD_PATH
from db_methods import *


#--------------------#
# COMMAND FUNCTIONS  #
#--------------------#

@MypyBot.message_handler(commands=['start'])
def start_message(message):
    MypyBot.send_message(
        message.chat.id,
        """
            –ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è, —è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –ê—Ä–∏–Ω—ã!
            —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã:
            /links 
            /pizza_menu
            /dialog
            /users
        """,
        reply_markup=types.ReplyKeyboardRemove()    # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –±—ã–ª–∞
    )

# –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@MypyBot.message_handler(commands=['users'])
def show_users(message):
    msg = ''
    if not users:
        MypyBot.send_message(message.chat.id, 'no one')
    else:
        print(len(users), users)
        for user in users:
            msg += str(user) + ' '
        MypyBot.send_message(message.chat.id, msg)


@MypyBot.message_handler(commands=['links'])
def button_message(message):
    markup=types.InlineKeyboardMarkup()
    item1=types.InlineKeyboardButton(
        "–ê–∫–∏–Ω–∞—Ç–æ—Ä", 
        url='https://ru.akinator.com'
    )
    item2=types.InlineKeyboardButton(
        "YouTube", 
        url='https://youtube.com'
    )
    item3=types.InlineKeyboardButton(
        "Author`s github", 
        url='https://github.com/medvedarina12/My_bot_arina'
    )
    markup.add(item1, item2, item3)
    MypyBot.send_message(message.chat.id,'–ú–æ–∏ —Å—Å—ã–ª–∫–∏:',reply_markup=markup)


@MypyBot.message_handler(commands=['pizza_menu'])
def button_pmenu(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    item1=types.KeyboardButton("Pepperoni")
    item2=types.KeyboardButton("Mushrooms")
    item3=types.KeyboardButton("Margarita")
    item4=types.KeyboardButton("With Pinneapples")
    item5=types.KeyboardButton("Ranger")
    item6=types.KeyboardButton("Maritime")
    markup.add(item1, item2, item3, item4, item5, item6)
    MypyBot.send_message(message.chat.id,'–ö–∞–∫—É—é –ø–∏—Ü—Ü—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?',reply_markup=markup)


@MypyBot.message_handler(commands=['dialog'])
def dialog(message):
    if str(message.chat.id) not in users:
        users[str(message.chat.id)] = {
            'd_checker': False,
            'd_cnt': 0,
            'result': None
        }
    users[str(message.chat.id)]['d_checker'] = True
    users[str(message.chat.id)]['d_cnt'] += 1
    users[str(message.chat.id)]['result'] = 0
    MypyBot.send_message(message.chat.id,'–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞')
    replyer(message)


#--------------------#
#  HELPER FUNCTIONS  #
#--------------------#

def dialogQuestion(msg):
    m = []      # markup objects
    scnt = 'q' + str(users[str(msg.chat.id)]['d_cnt'])      # q1 q8 
    q = q_base[scnt]['text']        # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    markup = types.ReplyKeyboardMarkup()
    for i in range(1, len(q_base[scnt])):
        item = types.KeyboardButton(q_base[scnt][str(i)]['text'])
        m.append(item)
    for i in m:
        markup.add(i)
    MypyBot.send_message(msg.chat.id, q, reply_markup=markup)


def check_result(message):
    if users[str(message.chat.id)]['d_cnt'] > 1:
        scnt = 'q' + str(users[str(message.chat.id)]['d_cnt'] - 1)
        for i in range(1, len(q_base[scnt])):
            if message.text in q_base[scnt][str(i)].values():
                a = list(q_base[scnt][str(i)].values())
                if a[1]:
                    users[str(message.chat.id)]['result'] += 1


#--------------------#
# REPLYER FUNCTIONS  #
#--------------------#

@MypyBot.message_handler(content_types = ['text'])
def replyer(message):
    if users:
        if users[str(message.chat.id)]['d_checker']:
            save_data(message)           # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
            check_result(message)        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if users[str(message.chat.id)]['d_cnt'] <= len(q_base):
                dialogQuestion(message)         # –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
                users[str(message.chat.id)]['d_cnt'] += 1
            else:
                users[str(message.chat.id)]['d_checker'] = False
                users[str(message.chat.id)]['d_cnt'] = 0
                save_result(message)
                MypyBot.send_message(
                    message.chat.id,
                    users[str(message.chat.id)]['result']
                )

    match message.text:
        case "Pepperoni": 
            MypyBot.reply_to(message, "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä")
        case "Mushrooms":
            MypyBot.reply_to(message, "–º–º–º –í–∫—É—Å–Ω–µ–Ω—å–∫–æ")
        case "Margarita":
            MypyBot.reply_to(message, "–∞ —ç—Ç—É —è –Ω–µ –ª—é–±–ª—é")
        case "With Pinneapples":
            MypyBot.reply_to(message, "–ù–µ–æ–±—ã—á–Ω–æ")
        case "Ranger":
            MypyBot.reply_to(message, "–ª—é–±–∏—à—å –æ—Å—Ç—Ä–µ–Ω—å–∫–æ–µ?")
        case "Maritime":
            MypyBot.reply_to(message, "–ì—É—Ä–º–∞–Ω?")
        case "üòÇ":
            MypyBot.reply_to(message, "–≠–π –Ω–µ –º–æ–ª—á–∏!")
        case "–ê–õ–ï!":
            MypyBot.reply_to(message, "–ù–ï –û–†–ò!")
        case _:
            if users:
                if users[str(message.chat.id)]['d_checker'] == False \
                    and users[str(message.chat.id)]['d_cnt'] == 0:
                    start_message(message)
            else:
                start_message(message)


@MypyBot.message_handler(content_types = ['sticker', 'photo'])
def content_replyer(message):
    if message.content_type == 'photo':
        raw = message.photo[2].file_id
        name = raw+".jpg"
        file_info = MypyBot.get_file(raw)
        downloaded_file = MypyBot.download_file(file_info.file_path)
        with open(FILE_UPLOAD_PATH + name,'wb') as new_file:
            new_file.write(downloaded_file)
        img = open(FILE_UPLOAD_PATH + name, 'rb')
        MypyBot.send_message(
            message.chat.id,
            "–ó–∞–ø—Ä–æ—Å –æ—Ç\n*{name} {last}*".format(name=message.chat.first_name, last=message.chat.last_name),
            parse_mode="Markdown"
        ) #–æ—Ç –∫–æ–≥–æ –∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        MypyBot.send_photo(message.chat.id, img)
        MypyBot.send_message(
            message.chat.id, 
            "*{name}!*\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ—É".format(
                name=message.chat.first_name, 
                last=message.chat.last_name, 
                text=message.text
            ), 
            parse_mode="Markdown"
        ) #—Ç–æ —á—Ç–æ –ø–æ–π–¥–µ—Ç —é–∑–µ—Ä—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è


#--------------------#
#     ENTRY POINT    #
#--------------------#

if __name__ == "__main__":
    MypyBot.polling()